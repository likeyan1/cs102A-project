package model;


import controller.ClickController;
import view.ChessboardPoint;

import javax.imageio.ImageIO;
import java.awt.*;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * 这个类表示国际象棋里面的车
 */
public class RookChessComponent extends ChessComponent {
    /**
     * 黑车和白车的图片，static使得其可以被所有车对象共享
     * <br>
     * FIXME: 需要特别注意此处加载的图片是没有背景底色的！！！
     */
    private static Image IMG_WHITE;
    private static Image IMG_BLACK;

    /**
     * 车棋子对象自身的图片，是上面两种中的一种
     */


    /**
     * 读取加载车棋子的图片
     *
     * @throws IOException
     */
    public void loadResource() throws IOException {
        if (IMG_WHITE == null) {
            IMG_WHITE = ImageIO.read(new File("./images/rook-white.png"));
        }

        if (IMG_BLACK == null) {
            IMG_BLACK = ImageIO.read(new File("./images/rook-black.png"));
        }
    }


    /**
     * 在构造棋子对象的时候，调用此方法以根据颜色确定rookImage的图片是哪一种
     *
     * @param color 棋子颜色
     */

    private void initiateImage(ChessColor color) {
        try {
            loadResource();
            if (color == ChessColor.WHITE) {
                chessImage = IMG_WHITE;
            } else if (color == ChessColor.BLACK) {
                chessImage = IMG_BLACK;
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public RookChessComponent(ChessboardPoint chessboardPoint, Point location, ChessColor color, ClickController listener, int size) {
        super(chessboardPoint, location, color, listener, size);
        initiateImage(color);
    }

    @Override
    public List<ChessboardPoint> getCanMovePoints(){
        ArrayList steps = new ArrayList<>();
        int X = getChessboardPoint().getX();
        int Y = getChessboardPoint().getY();
        ChessComponent chess = chessboard[X][Y];


        for (int i = 1; i < 8 - X; i++) {  //right
            int x = X + i;
            int y = Y;
            if (add(steps, chess, x, y)) {
                break;
            }
        }

        for (int i = 1; i < X + 1; i++) {  //left
            int x = X - i;
            int y = Y;
            if (add(steps, chess, x, y)) {
                break;
            }
        }

        for (int i = 1; i < Y + 1; i++) {  //up
            int x = X;
            int y = Y - i;
            if (add(steps, chess, x, y)) {
                break;
            }
        }

        for (int i = 1; i < 8 - Y; i++) {  //down
            int x = X;
            int y = Y + i;
            if (add(steps, chess, x, y)) {
                break;
            }
        }
        return steps;
    };


    /**
     * 车棋子的移动规则
     *
     * @param chessComponents 棋盘
     * @param destination     目标位置，如(0, 0), (0, 7)等等
     * @return 车棋子移动的合法性
     */

    @Override
    public boolean canMoveTo(ChessComponent[][] chessComponents, ChessboardPoint destination) {

        List<ChessboardPoint> steps = getCanMovePoints();
        boolean found = false;
        for (ChessboardPoint p : steps) {
            if (p.getX() == destination.getX() && p.getY() == destination.getY()) {
                found = true;
                break;
            }
        }
        return found;
    }

    /**
     * 注意这个方法，每当窗体受到了形状的变化，或者是通知要进行绘图的时候，就会调用这个方法进行画图。
     *
     * @param g 可以类比于画笔
     */
//    @Override
//    protected void paintComponent(Graphics g) {
//        super.paintComponent(g);
//        g.drawImage(chessImage, 0, 0, getWidth() , getHeight(), this);
//        g.setColor(Color.BLACK);
//        if (isSelected()) { // Highlights the model if selected.
//            g.setColor(Color.RED);
//            g.drawOval(0, 0, getWidth() , getHeight());
//        }
//    }
}
